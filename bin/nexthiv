#!/usr/bin/env python3

import argparse
import yaml
import nexthiv.align as align
import nexthiv.cluster as cluster
import nexthiv.resistance as resistance
import nexthiv.db
import nexthiv.utils

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(title='subcommands',description='valid subcommands',help='subcommand help',dest='subparser_name')

init_parser=subparsers.add_parser('init',help='Initialise database')
init_parser.add_argument('-c','--config',type=argparse.FileType('r'),required=True,help='YAML configuration file')

import_parser=subparsers.add_parser('import',help='Import CSV')
import_parser.add_argument('-c','--config',type=argparse.FileType('r'),required=True,help='YAML configuration file')
import_parser.add_argument('-i','--input',type=argparse.FileType('r'),required=True,help='TSV file')
import_parser.add_argument('-d','--destination',required=True,help='Destination table')

align_parser=subparsers.add_parser('align',help='Align sequences')
align_parser.add_argument('-c','--config',type=argparse.FileType('r'),required=True,help='YAML configuration file')

distance_parser=subparsers.add_parser('distance',help='Calculate distances')
distance_parser.add_argument('-c','--config',type=argparse.FileType('r'),required=True,help='YAML configuration file')

cluster_parser=subparsers.add_parser('cluster',help='Cluster sequences')
cluster_parser.add_argument('-c','--config',type=argparse.FileType('r'),required=True,help='YAML configuration file')

resistance_parser=subparsers.add_parser('resistance',help='Calculate resistance scores')
resistance_parser.add_argument('-c','--config',type=argparse.FileType('r'),required=True,help='YAML configuration file')

arguments=parser.parse_args()
action=arguments.subparser_name

# Init
if action=='init':
  config_file=arguments.config
  config=yaml.load(config_file)
  db=nexthiv.db.db_setup(config["db"]["backend"])
  db.db_init(config)

# Import
if action=='import':
  config_file=arguments.config
  config=yaml.load(config_file)
  db=nexthiv.db.db_setup(config["db"]["backend"])
  data=db.tsv2json(arguments.input)
  tbl=arguments.destination
  db.db_insert(config,tbl,data,chunksize=100000)

# Align
if action=='align':
  config_file=arguments.config
  config=yaml.load(config_file)
  db=nexthiv.db.db_setup(config["db"]["backend"])
  aln=align.align_seqs(config)
  aln=align.trim_alignment(config,aln)
  db.insert_seqs(config,aln,config['sequence']['processed_table'],config['sequence']['processed_name'])
  nexthiv.utils.insert_baseline_into_table(config,config['sequence']['processed_table'])

# Resistance
if action=='resistance':
  config_file=arguments.config
  config=yaml.load(config_file)
  db=nexthiv.db.db_setup(config["db"]["backend"])
  tbl=config["resistance"]["table"]
  data=resistance.get_scores(config)
  db.db_insert(config,tbl,data)
  nexthiv.utils.insert_baseline_into_table(config,config['resistance']['table'])

# Distances
if action=='distance':
  config_file=arguments.config
  config=yaml.load(config_file)
  cluster.insert_distances(config)

# Clustering
if action=='cluster':
  config_file=arguments.config
  config=yaml.load(config_file)
  cluster.insert_clustering(config)
